package data.scripts.world.systems;

import java.awt.Color;

import com.fs.starfarer.api.Global;
import com.fs.starfarer.api.campaign.econ.EconomyAPI;
import com.fs.starfarer.api.campaign.econ.MarketAPI;
import com.fs.starfarer.api.campaign.JumpPointAPI;
import com.fs.starfarer.api.campaign.LocationAPI;
import com.fs.starfarer.api.campaign.PersonImportance;
import com.fs.starfarer.api.campaign.PlanetAPI;
import com.fs.starfarer.api.campaign.SectorAPI;
import com.fs.starfarer.api.campaign.SectorEntityToken;
import com.fs.starfarer.api.campaign.SpecialItemData;
import com.fs.starfarer.api.campaign.StarSystemAPI;
import com.fs.starfarer.api.impl.campaign.ids.Commodities;
import com.fs.starfarer.api.impl.campaign.ids.Conditions;
import com.fs.starfarer.api.impl.campaign.ids.Industries;
import com.fs.starfarer.api.impl.campaign.ids.Items;
import com.fs.starfarer.api.impl.campaign.ids.Personalities;
import com.fs.starfarer.api.impl.campaign.ids.Ranks;
import com.fs.starfarer.api.impl.campaign.ids.Submarkets;
import com.fs.starfarer.api.impl.campaign.ids.StarTypes;
import com.fs.starfarer.api.impl.campaign.ids.Terrain;
import com.fs.starfarer.api.impl.campaign.ids.Voices;
import com.fs.starfarer.api.impl.campaign.ids.Skills;
import com.fs.starfarer.api.characters.FullName;
import com.fs.starfarer.api.characters.PersonAPI;

import com.fs.starfarer.api.impl.campaign.terrain.MagneticFieldTerrainPlugin.MagneticFieldParams;

import com.fs.starfarer.api.util.Misc;

//System properties
public class Norlem {
	public void generate(SectorAPI sector) {
		StarSystemAPI system = sector.createStarSystem("Norlem");
        system.getLocation().set(-100000, -48000);
        system.setBackgroundTextureFilename("graphics/backgrounds/background4.jpg");

		@SuppressWarnings("unused")
		LocationAPI hyper = Global.getSector().getHyperspace();
		system.setBackgroundTextureFilename("graphics/backgrounds/background4.jpg");
		// create the star and generate the hyperspace anchor for this system
		PlanetAPI star = system.initStar("norlem", // unique id for this star
										 StarTypes.WHITE_DWARF, // id in planets.json
										 200f,		// radius (in pixels at default zoom)
										 350, // corona radius, from star edge
										 5f, // solar wind burn level
										 1f, // flare probability
										 3f); // cr loss mult
		star.setCustomDescriptionId("norlem_star");

		system.setLightColor(new Color(200, 200, 200)); // light color in entire system, affects all entities
		/*
		 * addPlanet() parameters:
		 * 1. Unique id for this planet (or null to have it be autogenerated)
		 * 2. What the planet orbits (orbit is always circular)
		 * 3. Name
		 * 4. Planet type id in planets.json
		 * 5. Starting angle in orbit, i.e. 0 = to the right of the star
		 * 6. Planet radius, pixels at default zoom
		 * 7. Orbit radius, pixels at default zoom
		 * 8. Days it takes to complete an orbit. 1 day = 10 seconds.*/
		// Kang Planet
		PlanetAPI norlem1 = system.addPlanet("kang_planet", star, "Kang", "tundra", 0, 170, 1100, 80);
		norlem1.getSpec().setGlowTexture(Global.getSettings().getSpriteName("hab_glows", "sindria"));
		norlem1.getSpec().setGlowColor(new Color(255,255,255,255));
		norlem1.getSpec().setUseReverseLightForGlow(true);
		norlem1.getSpec().setTilt(15);
		norlem1.setInteractionImage("illustrations", "vacuum_colony");
		norlem1.setCustomDescriptionId("kang_planet_description");
		norlem1.applySpecChanges();

		// Kang Market
		Misc.initConditionMarket(norlem1);
		MarketAPI norlem1_market = Global.getFactory().createMarket("kang_market", "Kang", 5);
		norlem1_market.setFactionId("kangcharter");
		norlem1_market.setPrimaryEntity(norlem1);
        norlem1_market.setImmigrationIncentivesOn(true);

        EconomyAPI norlem1_global_economy = Global.getSector().getEconomy();
        norlem1_global_economy.addMarket(norlem1_market, false);

        norlem1.setFaction("kangcharter");
        norlem1.setMarket(norlem1_market);
        norlem1.getMarket().addCondition(Conditions.FRONTIER);
		norlem1.getMarket().addCondition(Conditions.DISSIDENT);
		norlem1.getMarket().addCondition(Conditions.RURAL_POLITY);
		norlem1.getMarket().addCondition(Conditions.POPULATION_5);

		norlem1.getMarket().addCondition(Conditions.HABITABLE);
		norlem1.getMarket().addCondition(Conditions.INIMICAL_BIOSPHERE);
		norlem1.getMarket().addCondition(Conditions.IRRADIATED);
		norlem1.getMarket().addCondition(Conditions.COLD);
		norlem1.getMarket().addCondition(Conditions.POOR_LIGHT);

        norlem1.getMarket().addCondition(Conditions.FARMLAND_POOR);
		norlem1.getMarket().addCondition(Conditions.ORGANICS_PLENTIFUL);

        norlem1.getMarket().addIndustry(Industries.POPULATION);
        norlem1.getMarket().addIndustry(Industries.MEGAPORT);
        norlem1.getMarket().addIndustry(Industries.WAYSTATION);
        norlem1.getMarket().addIndustry(Industries.FARMING);
        norlem1.getMarket().addIndustry(Industries.MINING);
        norlem1.getMarket().addIndustry(Industries.LIGHTINDUSTRY);
        norlem1.getMarket().addIndustry(Industries.PATROLHQ);
        norlem1.getMarket().addIndustry(Industries.HEAVYBATTERIES);
        norlem1.getMarket().addIndustry(Industries.STARFORTRESS);

        norlem1.getMarket().addSubmarket(Submarkets.SUBMARKET_OPEN);
        norlem1.getMarket().addSubmarket(Submarkets.SUBMARKET_STORAGE);
        norlem1.getMarket().addSubmarket(Submarkets.SUBMARKET_BLACK);

        norlem1_market.getIndustry(Industries.PATROLHQ).setImproved(true);
        norlem1_market.getIndustry(Industries.HEAVYBATTERIES).setSpecialItem(new SpecialItemData(Items.DRONE_REPLICATOR, null));

 		//Kang Prime Judiciary Executor
        PersonAPI jade_almir = Global.getFactory().createPerson();
        jade_almir.setId("jade_almir");
        jade_almir.setFaction("kangcharterjud");
        jade_almir.setGender(FullName.Gender.FEMALE);
        jade_almir.setPortraitSprite("graphics/portraits/portrait_luddic11.png");
      	jade_almir.setPersonality(Personalities.STEADY);
        jade_almir.setVoice(Voices.FAITHFUL);
        jade_almir.setRankId("Kang_Elder_Judiciary");
        jade_almir.setPostId("Kang_Elder_Judiciary");
        jade_almir.setImportance(PersonImportance.VERY_HIGH);
        jade_almir.getName().setFirst("Jade");
        jade_almir.getName().setLast("Almir");
		jade_almir.getStats().setSkillLevel(Skills.INDUSTRIAL_PLANNING, 1);
		jade_almir.getStats().setSkillLevel(Skills.CONTAINMENT_PROCEDURES, 1);
		jade_almir.getStats().setSkillLevel(Skills.FIELD_REPAIRS, 1);
		jade_almir.getStats().setSkillLevel(Skills.SUPPORT_DOCTRINE, 1);
		jade_almir.getStats().setSkillLevel(Skills.CREW_TRAINING, 1);
		jade_almir.getStats().setSkillLevel(Skills.COMBAT_ENDURANCE, 2);
		jade_almir.getStats().setSkillLevel(Skills.HELMSMANSHIP, 2);

        Global.getSector().getImportantPeople().addPerson(jade_almir);
        Global.getSector().getImportantPeople().getPerson("jade_almir").addTag("military");

		norlem1_market.getCommDirectory().addPerson(jade_almir);
        norlem1_market.getCommDirectory().getEntryForPerson(jade_almir).setHidden(false);
        norlem1_market.addPerson(jade_almir);

		// Kang Magnetic Field
        SectorEntityToken kangfield = system.addTerrain(Terrain.MAGNETIC_FIELD,
            new MagneticFieldParams(norlem1.getRadius() + 180f, // terrain effect band width
                        (norlem1.getRadius() + 120f) / 2f, // terrain effect middle radius
                        norlem1, // entity that it's around
                        norlem1.getRadius() + 10f, // visual band start
                        norlem1.getRadius() + 50f + 250f, // visual band end
                        new Color(0, 200, 255, 125), // base color
                        1f, // Aurora probability
                        new Color(150, 200, 200),
                        new Color(80, 145, 200),
                        new Color(255, 100, 255),
                        new Color(0, 255, 200),
                        new Color(255, 150, 200),
                        new Color(180, 0, 180),
                        new Color(0, 255, 255),
                        new Color(145, 0, 255)));
        kangfield.setCircularOrbit(norlem1, 0, 0, 100);

		// Inner Jump Point
		JumpPointAPI jumpPoint1 = Global.getFactory().createJumpPoint("norlem_jump1", "Norlem Inner Jump-point");
		jumpPoint1.setCircularOrbit(system.getEntityById("norlem"), 0, 1750, 100);
		jumpPoint1.setStandardWormholeToHyperspaceVisual();
		system.addEntity(jumpPoint1);

		// Loke Planet
		PlanetAPI norlem2 = system.addPlanet("loke_planet", star, "Loke", "barren-bombarded", 0, 140, 2250, 120);
		norlem2.getSpec().setTilt(-8);
		norlem2.setCustomDescriptionId("loke_planet_description");
		norlem2.setInteractionImage("illustrations", "mine");
		norlem2.applySpecChanges();

		// Loke Market
		Misc.initConditionMarket(norlem2);
        MarketAPI norlem2_market = Global.getFactory().createMarket("loke_market", "Loke", 5);
        norlem2_market.setFactionId("kangcharter");
        norlem2_market.setPrimaryEntity(norlem2);
        norlem2_market.setImmigrationIncentivesOn(true);

		EconomyAPI norlem2_global_economy = Global.getSector().getEconomy();
		norlem2_global_economy.addMarket(norlem2_market, false);

		norlem2.setFaction("kangcharter");
        norlem2.setMarket(norlem2_market);
		norlem2.getMarket().addCondition(Conditions.FRONTIER);
		norlem2.getMarket().addCondition(Conditions.DISSIDENT);
		norlem2.getMarket().addCondition(Conditions.INDUSTRIAL_POLITY);
		norlem2.getMarket().addCondition(Conditions.POPULATION_5);

		norlem2.getMarket().addCondition(Conditions.METEOR_IMPACTS);
		norlem2.getMarket().addCondition(Conditions.NO_ATMOSPHERE);
		norlem2.getMarket().addCondition(Conditions.VERY_COLD);
		norlem2.getMarket().addCondition(Conditions.POOR_LIGHT);

		norlem2.getMarket().addCondition(Conditions.ORE_RICH);
		norlem2.getMarket().addCondition(Conditions.RARE_ORE_RICH);

		norlem2.getMarket().addIndustry(Industries.POPULATION);
		norlem2.getMarket().addIndustry(Industries.MEGAPORT);
		norlem2.getMarket().addIndustry(Industries.WAYSTATION);
		norlem2.getMarket().addIndustry(Industries.MINING);
		norlem2.getMarket().addIndustry(Industries.REFINING);
		norlem2.getMarket().addIndustry(Industries.ORBITALWORKS);
		norlem2.getMarket().addIndustry(Industries.PATROLHQ);
		norlem2.getMarket().addIndustry(Industries.HEAVYBATTERIES);
		norlem2.getMarket().addIndustry(Industries.STARFORTRESS);

		norlem2.getMarket().addSubmarket(Submarkets.SUBMARKET_OPEN);
		norlem2.getMarket().addSubmarket(Submarkets.SUBMARKET_STORAGE);
		norlem2.getMarket().addSubmarket(Submarkets.SUBMARKET_BLACK);

        norlem2_market.getIndustry(Industries.PATROLHQ).setImproved(true);
        norlem2_market.getIndustry(Industries.ORBITALWORKS).setSpecialItem(new SpecialItemData(Items.CORRUPTED_NANOFORGE, null));
        norlem2_market.getIndustry(Industries.HEAVYBATTERIES).setSpecialItem(new SpecialItemData(Items.DRONE_REPLICATOR, null));

//Loke Economic Director
        PersonAPI ash_uker = Global.getFactory().createPerson();
        ash_uker.setId("ash_uker");
        ash_uker.setFaction("kangchartereco");
        ash_uker.setGender(FullName.Gender.FEMALE);
        ash_uker.setPortraitSprite("graphics/portraits/portrait14.png");
      	ash_uker.setPersonality(Personalities.AGGRESSIVE);
        ash_uker.setVoice(Voices.SPACER);
        ash_uker.setRankId("Kang_Elder_Economy");
        ash_uker.setPostId("Kang_Elder_Economy");
        ash_uker.setImportance(PersonImportance.VERY_HIGH);
        ash_uker.getName().setFirst("Ash");
        ash_uker.getName().setLast("Uker");
		ash_uker.getStats().setSkillLevel(Skills.INDUSTRIAL_PLANNING, 2);
		ash_uker.getStats().setSkillLevel(Skills.BULK_TRANSPORT, 1);
		ash_uker.getStats().setSkillLevel(Skills.FIELD_REPAIRS, 1);
		ash_uker.getStats().setSkillLevel(Skills.CONTAINMENT_PROCEDURES, 1);
		ash_uker.getStats().setSkillLevel(Skills.DERELICT_CONTINGENT, 1);
		ash_uker.getStats().setSkillLevel(Skills.COMBAT_ENDURANCE, 2);
		ash_uker.getStats().setSkillLevel(Skills.SYSTEMS_EXPERTISE, 2);

        Global.getSector().getImportantPeople().addPerson(ash_uker);
        Global.getSector().getImportantPeople().getPerson("ash_uker").addTag("trade");

		norlem2_market.getCommDirectory().addPerson(ash_uker);
        norlem2_market.getCommDirectory().getEntryForPerson(ash_uker).setHidden(true);
        norlem2_market.addPerson(ash_uker);
//Director Guard (Hal Nimun)
        PersonAPI hal_nimun = Global.getFactory().createPerson();
        hal_nimun.setId("hal_nimun");
        hal_nimun.setFaction("kangchartereco");
        hal_nimun.setGender(FullName.Gender.MALE);
        hal_nimun.setPortraitSprite("graphics/portraits/portrait23.png");
      	hal_nimun.setPersonality(Personalities.AGGRESSIVE);
        hal_nimun.setVoice(Voices.SOLDIER);
        hal_nimun.setRankId(Ranks.SPACE_COMMANDER);
        hal_nimun.setPostId("Kang_Guard_Economy");
        hal_nimun.setImportance(PersonImportance.MEDIUM);
        hal_nimun.getName().setFirst("Hal");
        hal_nimun.getName().setLast("Nimun");
		hal_nimun.getStats().setSkillLevel(Skills.OFFICER_TRAINING, 1);
		hal_nimun.getStats().setSkillLevel(Skills.OFFICER_MANAGEMENT, 1);
		hal_nimun.getStats().setSkillLevel(Skills.FIELD_REPAIRS, 1);
		hal_nimun.getStats().setSkillLevel(Skills.TARGET_ANALYSIS, 2);
		hal_nimun.getStats().setSkillLevel(Skills.HELMSMANSHIP, 2);

        Global.getSector().getImportantPeople().addPerson(hal_nimun);
        Global.getSector().getImportantPeople().getPerson("hal_nimun").addTag("military");
        Global.getSector().getImportantPeople().getPerson("hal_nimun").getRelToPlayer().setRel(-0.1f);

		norlem2_market.getCommDirectory().addPerson(hal_nimun);
        norlem2_market.getCommDirectory().getEntryForPerson(hal_nimun).setHidden(true);
        norlem2_market.addPerson(hal_nimun);
		/*
		 * addRingBand() parameters:
		 * 1. What it orbits
		 * 2. Category under "graphics" in settings.json
		 * 3. Key in category
		 * 4. Width of band within the texture
		 * 5. Index of band
		 * 6. Color to apply to band
		 * 7. Width of band (in the game)
		 * 8. Orbit radius (of the middle of the band)
		 * 9. Orbital period, in days
		 */
		// Erlem Belt
		system.addAsteroidBelt(star, 80, 3000, 170, 200, 250, Terrain.ASTEROID_BELT, "Erlem Belt");
		system.addRingBand(star, "misc", "rings_dust0", 256f, 0, Color.white, 256f, 2900, 160f, null, null);
		system.addRingBand(star, "misc", "rings_asteroids0", 256f, 0, Color.white, 256f, 3000, 160f, null, null);
		system.addRingBand(star, "misc", "rings_dust0", 256f, 0, Color.white, 256f, 3100, 160f, null, null);

//Vurmun Planet
		PlanetAPI norlem3 = system.addPlanet("vurmun_planet", star, "Vurmun", "gas_giant", 0, 340, 5050, 240);
		norlem3.getSpec().setPlanetColor(new Color(255,170,255,255));
		norlem3.getSpec().setAtmosphereColor(new Color(145,75,160,140));
		norlem3.getSpec().setCloudColor(new Color(200,165,255,200));
		norlem3.getSpec().setUseReverseLightForGlow(true);
		norlem3.getSpec().setTilt(10);
		norlem3.applySpecChanges();
		norlem3.setCustomDescriptionId("vurmun_planet_description");

//Vurmun Market
		Misc.initConditionMarket(norlem3);
		MarketAPI norlem3_market = Global.getFactory().createMarket("vurmun_market", "Vurmun", 4);
		norlem3_market.setFactionId("kangcharter");
		norlem3_market.setPrimaryEntity(norlem3);
        norlem3_market.setImmigrationIncentivesOn(true);

        EconomyAPI norlem3_global_economy = Global.getSector().getEconomy();
        norlem3_global_economy.addMarket(norlem3_market, false);

        norlem3.setFaction("kangcharter");
        norlem3.setMarket(norlem3_market);
        norlem3.getMarket().addCondition(Conditions.FRONTIER);
        norlem3.getMarket().addCondition(Conditions.DISSIDENT);
        norlem3.getMarket().addCondition(Conditions.INDUSTRIAL_POLITY);
        norlem3.getMarket().addCondition(Conditions.POPULATION_4);

        norlem3.getMarket().addCondition(Conditions.HIGH_GRAVITY);
        norlem3.getMarket().addCondition(Conditions.EXTREME_WEATHER);
        norlem3.getMarket().addCondition(Conditions.DENSE_ATMOSPHERE);
        norlem3.getMarket().addCondition(Conditions.COLD);
        norlem3.getMarket().addCondition(Conditions.DARK);

        norlem3.getMarket().addCondition(Conditions.VOLATILES_PLENTIFUL);

        norlem3.getMarket().addIndustry(Industries.POPULATION);
        norlem3.getMarket().addIndustry(Industries.MEGAPORT);
        norlem3.getMarket().addIndustry(Industries.WAYSTATION);
        norlem3.getMarket().addIndustry(Industries.MINING);
        norlem3.getMarket().addIndustry(Industries.FUELPROD);
		norlem3.getMarket().addIndustry(Industries.PATROLHQ);
		norlem3.getMarket().addIndustry(Industries.HEAVYBATTERIES);
		norlem3.getMarket().addIndustry(Industries.STARFORTRESS);

        norlem3.getMarket().addSubmarket(Submarkets.SUBMARKET_OPEN);
        norlem3.getMarket().addSubmarket(Submarkets.SUBMARKET_STORAGE);
        norlem3.getMarket().addSubmarket(Submarkets.SUBMARKET_BLACK);

        norlem3_market.getIndustry(Industries.PATROLHQ).setImproved(true);
        norlem3_market.getIndustry(Industries.HEAVYBATTERIES).setSpecialItem(new SpecialItemData(Items.DRONE_REPLICATOR, null));
        norlem3_market.getIndustry(Industries.FUELPROD).setSpecialItem(new SpecialItemData("tat_corrupted_synchrotron", null));

		// Vurmun Magnetic Field
        SectorEntityToken vurmunfield = system.addTerrain(Terrain.MAGNETIC_FIELD,
            new MagneticFieldParams(norlem3.getRadius() + 200f, // terrain effect band width
                        (norlem3.getRadius() + 120f) / 2f, // terrain effect middle radius
                        norlem3, // entity that it's around
                        norlem3.getRadius() + 10f, // visual band start
                        norlem3.getRadius() + 50f + 250f, // visual band end
                        new Color(250, 70, 255, 125), // base color
                        1f, // Aurora probability
                        new Color(250, 200, 200),//alternate aurora colors
                        new Color(180, 145, 200),
                        new Color(255, 75, 200),
                        new Color(100, 255, 200),
                        new Color(255, 100, 170),
                        new Color(255, 0, 175),
                        new Color(100, 255, 255),
                        new Color(255, 0, 255)));
        vurmunfield.setCircularOrbit(norlem3, 0, 0, 100);

 		//Vurmun Intelligence Counselor
        PersonAPI zarek_yu = Global.getFactory().createPerson();
        zarek_yu.setId("zarek_yu");
        zarek_yu.setFaction("kangcharterint");
        zarek_yu.setGender(FullName.Gender.MALE);
        zarek_yu.setPortraitSprite("graphics/portraits/portrait_league06.png");
      	zarek_yu.setPersonality(Personalities.CAUTIOUS);
        zarek_yu.setVoice(Voices.BUSINESS);
        zarek_yu.setRankId("Kang_Elder_Intelligence");
        zarek_yu.setPostId("Kang_Elder_Intelligence");
        zarek_yu.setImportance(PersonImportance.VERY_HIGH);
        zarek_yu.getName().setFirst("Zarek");
        zarek_yu.getName().setLast("Yu");
		zarek_yu.getStats().setSkillLevel(Skills.ELECTRONIC_WARFARE, 1);
		zarek_yu.getStats().setSkillLevel(Skills.FIELD_MODULATION, 1);
		zarek_yu.getStats().setSkillLevel(Skills.PHASE_CORPS, 1);
		zarek_yu.getStats().setSkillLevel(Skills.TACTICAL_DRILLS, 1);
		zarek_yu.getStats().setSkillLevel(Skills.COORDINATED_MANEUVERS, 1);
		zarek_yu.getStats().setSkillLevel(Skills.TARGET_ANALYSIS, 2);
		zarek_yu.getStats().setSkillLevel(Skills.POLARIZED_ARMOR, 2);

        Global.getSector().getImportantPeople().addPerson(zarek_yu);
        Global.getSector().getImportantPeople().getPerson("zarek_yu").addTag("underworld");

		norlem3_market.getCommDirectory().addPerson(zarek_yu);
        norlem3_market.getCommDirectory().getEntryForPerson(zarek_yu).setHidden(true);
        norlem3_market.addPerson(zarek_yu);

//Vurmun Ring
		system.addAsteroidBelt(norlem3, 0, 650, 128, 40, 80, Terrain.ASTEROID_BELT, "Vurmun Ring");
		system.addRingBand(norlem3, "misc", "rings_dust0", 256f, 0, Color.white, 256f, 650, 35f, null, null);

//Vurmine Moon
		PlanetAPI vurmun1 = system.addPlanet("vurmine_planet", norlem3, "Vurmine", "toxic", 0, 130, 1100, 100);
		vurmun1.getSpec().setTilt(0);
		vurmun1.applySpecChanges();
		vurmun1.setCustomDescriptionId("vurmine_planet_description");

		vurmun1.getMarket().addCondition(Conditions.DENSE_ATMOSPHERE);
		vurmun1.getMarket().addCondition(Conditions.TOXIC_ATMOSPHERE);
		vurmun1.getMarket().addCondition(Conditions.EXTREME_WEATHER);
		vurmun1.getMarket().addCondition(Conditions.COLD);
		vurmun1.getMarket().addCondition(Conditions.DARK);
   		vurmun1.getMarket().addCondition(Conditions.VOLATILES_TRACE);
		vurmun1.getMarket().addCondition(Conditions.ORGANICS_TRACE);

//Urgal Planet
		PlanetAPI norlem4 = system.addPlanet("urgal_planet", star, "Urgal", "ice_giant", 0, 300, 9500, 310);
		norlem4.getSpec().setPlanetColor(new Color(240,170,255,255));
		norlem4.getSpec().setAtmosphereColor(new Color(140,75,255,140));
		norlem4.getSpec().setCloudColor(new Color(240,165,255,200));

		norlem4.getSpec().setTilt(25);
		norlem4.applySpecChanges();
		norlem4.setCustomDescriptionId("urgal_planet_description");

        norlem4.getMarket().addCondition(Conditions.HIGH_GRAVITY);
		norlem4.getMarket().addCondition(Conditions.WATER_SURFACE);
		norlem4.getMarket().addCondition(Conditions.DENSE_ATMOSPHERE);
		norlem4.getMarket().addCondition(Conditions.EXTREME_WEATHER);
		norlem4.getMarket().addCondition(Conditions.VERY_COLD);
		norlem4.getMarket().addCondition(Conditions.DARK);

		norlem4.getMarket().addCondition(Conditions.VOLATILES_PLENTIFUL);

//Urgal Magnetic Field
        SectorEntityToken urgalfield = system.addTerrain(Terrain.MAGNETIC_FIELD,
            new MagneticFieldParams(norlem4.getRadius() + 180f, // terrain effect band width
                        (norlem4.getRadius() + 120f) / 2f, // terrain effect middle radius
                        norlem4, // entity that it's around
                        norlem4.getRadius() + 10f, // visual band start
                        norlem4.getRadius() + 50f + 250f, // visual band end
                        new Color(80, 80, 255, 125), // base color
                        1f, // Aurora probability
                        new Color(150, 180, 255),
                        new Color(80, 140, 255),
                        new Color(200, 100, 255),
                        new Color(0, 200, 255),
                        new Color(200, 140, 255),
                        new Color(180, 0, 255),
                        new Color(200, 0, 255),
                        new Color(120, 120, 255)));
        urgalfield.setCircularOrbit(norlem4, 0, 0, 100);

//Helm Moon
		PlanetAPI urgal1 = system.addPlanet("helm_planet", norlem4, "Helm", "cryovolcanic", 0, 140, 900, 100);
		urgal1.getSpec().setTilt(30);
		urgal1.setCustomDescriptionId("helm_planet_description");
		urgal1.setInteractionImage("illustrations", "ilm");
		urgal1.applySpecChanges();

//Helm Market
		Misc.initConditionMarket(urgal1);
        MarketAPI urgal1_market = Global.getFactory().createMarket("helm_market", "Helm", 3);
        urgal1_market.setFactionId("kangcharter");
        urgal1_market.setPrimaryEntity(urgal1);
        urgal1_market.setImmigrationIncentivesOn(true);

        EconomyAPI urgal1_global_economy = Global.getSector().getEconomy();
        urgal1_global_economy.addMarket(urgal1_market, false);

        urgal1.setFaction("kangcharter");
        urgal1.setMarket(urgal1_market);
        urgal1.getMarket().addCondition(Conditions.FRONTIER);
        urgal1.getMarket().addCondition(Conditions.DISSIDENT);
        urgal1.getMarket().addCondition(Conditions.OUTPOST);
        urgal1.getMarket().addCondition(Conditions.POPULATION_3);

		urgal1.getMarket().addCondition(Conditions.WATER_SURFACE);
        urgal1.getMarket().addCondition(Conditions.THIN_ATMOSPHERE);
        urgal1.getMarket().addCondition(Conditions.VERY_COLD);
        urgal1.getMarket().addCondition(Conditions.DARK);

        urgal1.getMarket().addCondition(Conditions.VOLATILES_TRACE);

        urgal1.getMarket().addIndustry(Industries.POPULATION);
        urgal1.getMarket().addIndustry(Industries.MEGAPORT);
        urgal1.getMarket().addIndustry(Industries.WAYSTATION);
        urgal1.getMarket().addIndustry(Industries.HIGHCOMMAND);
        urgal1.getMarket().addIndustry(Industries.HEAVYBATTERIES);
        urgal1.getMarket().addIndustry(Industries.STARFORTRESS);
        urgal1.getMarket().addIndustry(Industries.CRYOREVIVAL);

        urgal1.getMarket().addSubmarket(Submarkets.SUBMARKET_OPEN);
        urgal1.getMarket().addSubmarket(Submarkets.SUBMARKET_STORAGE);
        urgal1.getMarket().addSubmarket(Submarkets.SUBMARKET_BLACK);
        urgal1.getMarket().addSubmarket(Submarkets.GENERIC_MILITARY);

        urgal1_market.getIndustry(Industries.HIGHCOMMAND).setAICoreId(Commodities.ALPHA_CORE);
        urgal1_market.getIndustry(Industries.HIGHCOMMAND).setImproved(true);
        urgal1_market.getIndustry(Industries.HEAVYBATTERIES).setSpecialItem(new SpecialItemData(Items.DRONE_REPLICATOR, null));

//Helm Military Harbinger
        PersonAPI erik_frig = Global.getFactory().createPerson();
        erik_frig.setId("erik_frig");
        erik_frig.setFaction("kangchartermil");
        erik_frig.setGender(FullName.Gender.MALE);
        erik_frig.setPortraitSprite("graphics/portraits/portrait30.png");
      	erik_frig.setPersonality(Personalities.STEADY);
        erik_frig.setVoice(Voices.OFFICIAL);
        erik_frig.setRankId("Kang_Elder_Military");
        erik_frig.setPostId("Kang_Elder_Military");
        erik_frig.setImportance(PersonImportance.VERY_HIGH);
        erik_frig.getName().setFirst("Erik");
        erik_frig.getName().setLast("Frig");
		erik_frig.getStats().setSkillLevel(Skills.OFFICER_TRAINING, 1);
		erik_frig.getStats().setSkillLevel(Skills.OFFICER_MANAGEMENT, 1);
		erik_frig.getStats().setSkillLevel(Skills.COMBAT_ENDURANCE, 2);
		erik_frig.getStats().setSkillLevel(Skills.IMPACT_MITIGATION, 2);
		erik_frig.getStats().setSkillLevel(Skills.DAMAGE_CONTROL, 2);
		erik_frig.getStats().setSkillLevel(Skills.BALLISTIC_MASTERY, 2);
		erik_frig.getStats().setSkillLevel(Skills.HELMSMANSHIP, 2);

        Global.getSector().getImportantPeople().addPerson(erik_frig);
        Global.getSector().getImportantPeople().getPerson("erik_frig").addTag("military");

		urgal1_market.getCommDirectory().addPerson(erik_frig);
        urgal1_market.getCommDirectory().getEntryForPerson(erik_frig).setHidden(false);
        urgal1_market.addPerson(erik_frig);

//Helm Research Guide
        PersonAPI loren_blaze = Global.getFactory().createPerson();
        loren_blaze.setId("loren_blaze");
        loren_blaze.setFaction("kangcharterres");
        loren_blaze.setGender(FullName.Gender.ANY);
        loren_blaze.setPortraitSprite("graphics/portraits/portrait_league07.png");
      	loren_blaze.setPersonality(Personalities.RECKLESS);
        loren_blaze.setVoice(Voices.SCIENTIST);
        loren_blaze.setRankId("Kang_Elder_Research");
        loren_blaze.setPostId("Kang_Elder_Research");
        loren_blaze.setImportance(PersonImportance.VERY_HIGH);
        loren_blaze.getName().setFirst("Loren");
        loren_blaze.getName().setLast("Blaze");
		loren_blaze.getStats().setSkillLevel(Skills.CONTAINMENT_PROCEDURES, 1);
		loren_blaze.getStats().setSkillLevel(Skills.HULL_RESTORATION, 1);
		loren_blaze.getStats().setSkillLevel(Skills.ELECTRONIC_WARFARE, 1);
		loren_blaze.getStats().setSkillLevel(Skills.PHASE_CORPS, 1);
		loren_blaze.getStats().setSkillLevel(Skills.FLUX_REGULATION, 1);
		loren_blaze.getStats().setSkillLevel(Skills.ENERGY_WEAPON_MASTERY, 2);
		loren_blaze.getStats().setSkillLevel(Skills.SYSTEMS_EXPERTISE, 2);

        Global.getSector().getImportantPeople().addPerson(loren_blaze);
        Global.getSector().getImportantPeople().getPerson("loren_blaze").addTag("science");

		urgal1_market.getCommDirectory().addPerson(loren_blaze);
        urgal1_market.getCommDirectory().getEntryForPerson(loren_blaze).setHidden(false);
        urgal1_market.addPerson(loren_blaze);

		// Urlem Belt
		system.addAsteroidBelt(star, 80, 7000, 170, 200, 250, Terrain.ASTEROID_BELT, "Urlem Belt");
		system.addRingBand(star, "misc", "rings_ice0", 256f, 0, Color.white, 256f, 6900, 300f, null, null);
		system.addRingBand(star, "misc", "rings_asteroids0", 256f, 0, Color.white, 256f, 7000, 300f, null, null);
		system.addRingBand(star, "misc", "rings_ice0", 256f, 0, Color.white, 256f, 7100, 300f, null, null);

		// generates hyperspace destinations for in-system jump points
		system.autogenerateHyperspaceJumpPoints(true, true);
    	Misc.setAllPlanetsSurveyed(system, true);
    	        for (MarketAPI sysMarket : Global.getSector().getEconomy().getMarkets(system)) {
		sysMarket.setSurveyLevel(MarketAPI.SurveyLevel.FULL);}
  }
}